}else{print("Warning: name for transformation not recognized")}
## Visualize the data before and after transformation (for one sample to get an idea of suitability of transformation:
#create histogram for original distribution for first column with data
hist(metabolomicsDataGroups[,5], col='steelblue', main='Original')
#create histogram for log-transformed distribution
hist(metabolomicsDataGroups_transformed[,5], col='coral2', main=transformation)
## Test if the transformation creates a normally distributed dataset (alpha >= 0.05)
##Calculate all Shapiro values for raw and transformed data:
metabolomicsDataGroups_Shapiro <- lapply(metabolomicsDataGroups[,5:columns], shapiro.test)
metabolomicsDataGroups_transformed_Shapiro <- lapply(metabolomicsDataGroups_transformed[,5:columns], shapiro.test)
metabolomicsDataGroups_transformed_Shapiro_pvalues <- do.call(rbind, metabolomicsDataGroups_transformed_Shapiro)
## Count how often the p-value is above 0.05, to obtain an estimate of achieved normality due to transformation
metabolomicsDataGroups_Shapiro_pvalues_sum <- sum(metabolomicsDataGroups_Shapiro_pvalues[,2] >= 0.05, na.rm=TRUE)
metabolomicsDataGroups_transformed_Shapiro_pvalues_sum <- sum(metabolomicsDataGroups_transformed_Shapiro_pvalues[,2] >= 0.05, na.rm=TRUE)
percentageThreshold <- floor(((columns)/10)*7.5) #Now set at 75% (7.5); can be strickter if the data permits this.
#Print relevant information:
if(metabolomicsDataGroups_transformed_Shapiro_pvalues_sum[1] > percentageThreshold ){paste0("Data after ", transformation ," transformation seems to follow a normal distribution for 75% or more of your data")} else{
print("Advised to select a different data transformation procedure")}
View(metabolomicsDataGroups_transformed)
# Visualize all information in a heatmap
heatmap3 <- heatmaply::heatmaply(metabolomicsDataGroups_transformed[,5:100], grid_gap = 1, colors = hcl.colors(200), showticklabels = c(T, F), margins = c(80, 10))
heatmap3
# Libraries (dplyr already previously loaded but also important)
if(!"ggplot2" %in% installed.packages()){install.packages("ggplot2")}
library(ggplot2)
if(!"forcats" %in% installed.packages()){install.packages("forcats")}
library(forcats)
if(!"hrbrthemes" %in% installed.packages()){install.packages("hrbrthemes")}
library(hrbrthemes)
if(!"viridis" %in% installed.packages()){install.packages("viridis")}
library(viridis)
if(!"ggbeeswarm" %in% installed.packages()){install.packages("ggbeeswarm")}
library(ggbeeswarm)
##### Example data to check if setup of packages is correct #####
# Load dataset from github
data <- read.table("https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/10_OneNumSevCatSubgroupsSevObs.csv", header=T, sep=",") %>%
mutate(tip = round(tip/total_bill*100, 1))
View(data)
# Grouped
data %>%
mutate(day = fct_reorder(day, tip)) #%>%
##### Example data to check if setup of packages is correct #####
# Load dataset from github
data <- read.table("https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/10_OneNumSevCatSubgroupsSevObs.csv", header=T, sep=",") %>%
mutate(tip = round(tip/total_bill*100, 1))
?fct_reorder
fct_reorder
# Grouped
plot_data %>%
mutate(day = fct_reorder(day, tip)) %>%
mutate(day = factor(day, levels=c("Thur", "Fri", "Sat", "Sun"))) %>%
ggplot(aes(fill=sex, y=tip, x=day)) +
geom_violin(position="dodge", alpha=0.5, outlier.colour="transparent") +
scale_fill_viridis(discrete=T, name="") +
theme_ipsum()  +
xlab("") +
ylab("Tip (%)") +
ylim(0,40)
# Grouped
plot_data <- data %>%
mutate(day = fct_reorder(day, tip)) %>%
mutate(day = factor(day, levels=c("Thur", "Fri", "Sat", "Sun"))) %>%
ggplot(aes(fill=sex, y=tip, x=day)) +
geom_violin(position="dodge", alpha=0.5, outlier.colour="transparent") +
scale_fill_viridis(discrete=T, name="") +
theme_ipsum()  +
xlab("") +
ylab("Tip (%)") +
ylim(0,40)
?outlier.colour
?geom_violin
# Grouped
plot_data <- data %>%
mutate(day = fct_reorder(day, tip)) %>%
mutate(day = factor(day, levels=c("Thur", "Fri", "Sat", "Sun"))) %>%
ggplot(aes(fill=sex, y=tip, x=day)) +
geom_violin(position="dodge", alpha=0.5, colour="transparent") +
scale_fill_viridis(discrete=T, name="") +
theme_ipsum()  +
xlab("") +
ylab("Tip (%)") +
ylim(0,40)
# Grouped
plot <- data %>%
mutate(day = fct_reorder(day, tip)) %>%
mutate(day = factor(day, levels=c("Thur", "Fri", "Sat", "Sun"))) %>%
ggplot(aes(fill=sex, y=tip, x=day)) +
geom_violin(position="dodge", alpha=0.5, colour="transparent") +
scale_fill_viridis(discrete=T, name="") +
theme_ipsum()  +
xlab("") +
ylab("Tip (%)") +
ylim(0,40)
rm(plot_data)
plot
# Grouped
plot <- data %>%
mutate(day = fct_reorder(day, tip)) %>%
mutate(day = factor(day, levels=c("Thur", "Fri", "Sat", "Sun"))) %>%
ggplot(aes(fill=sex, y=tip, x=day)) +
geom_violin(position="dodge", alpha=0.5) +
scale_fill_viridis(discrete=T, name="") +
theme_ipsum()  +
xlab("") +
ylab("Tip (%)") +
ylim(0,40)
plot
# Grouped
plot <- data %>%
mutate(day = fct_reorder(day, tip)) %>%
mutate(day = factor(day, levels=c("Thur", "Fri", "Sat", "Sun"))) %>%
ggplot(aes(fill=sex, y=tip, x=day)) +
geom_violin(position="dodge", alpha=0.5) +
scale_fill_viridis(discrete=T, name="") +
theme_ipsum()  +
xlab("") +
ylab("Tip (%)") +
ylim(0,40)
plot
# check if libraries are already installed > otherwise install it
if(!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager",repos = "http://cran.us.r-project.org")
if(!"dplyr" %in% installed.packages()) BiocManager::install("dplyr")
if(!"stringr" %in% installed.packages()){install.packages("stringr")}
#load libraries
library(dplyr)
library(stringr)
#Download ‘readxl’ package
#Load the ‘readxl’ package
install.packages("read.csv")
library(readxl)
#Add data location as variable
#Read the first tab of the data file
#Make a copy of the data to compare against if needed
metabolomicsData <- read_excel("C:/Users/Tessa/Documents/GitHub/Workshop1/scripts/Data/NoMa_NMR_intervention_GEOcodes_Sent Susan.xlsx")
metabolomicsData_copy <- metabolomicsData
#Use the search box to find sample ‘2_A5’
# Convert the textual 'NA' labels with the real NA (not available)
metabolomicsData[metabolomicsData == "NA"] <- NA
# Check how many NAs are part of sample '2_A5'.
sum(is.na(metabolomicsData$`Sample name` == "2_A5")) ##Fill in the missing information at the '...'
# Install the required package
install.packages("heatmaply")
library(heatmaply)
#Visualize this information in a heatmap
heatmap1 <- heatmaply::heatmaply(is.na10(metabolomicsData[,3:100], grid_gap = 1, colors = heat.colors(200), showticklabels = c(T, F), margins = c(80, 10)))
install.packages("heatmaply")
# check if libraries are already installed > otherwise install it
if(!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager",repos = "http://cran.us.r-project.org")
if(!"dplyr" %in% installed.packages()) BiocManager::install("dplyr")
if(!"stringr" %in% installed.packages()){install.packages("stringr")}
#load libraries
library(dplyr)
library(stringr)
library(ggplot2)
library(forcats)
library(hrbrthemes)
library(viridis)
library(ggbeeswarm)
##### Example data to check if setup of packages is correct #####
# Load dataset from github
data <- read.table("https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/10_OneNumSevCatSubgroupsSevObs.csv", header=T, sep=",") %>%
mutate(tip = round(tip/total_bill*100, 1))
# Grouped
plot <- data %>%
mutate(day = fct_reorder(day, tip)) %>%
mutate(day = factor(day, levels=c("Thur", "Fri", "Sat", "Sun"))) %>%
ggplot(aes(fill=sex, y=tip, x=day)) +
geom_violin(position="dodge", alpha=0.5) +
scale_fill_viridis(discrete=T, name="") +
theme_ipsum()  +
xlab("") +
ylab("Tip (%)") +
ylim(0,40)
plot
data
View(data)
# Grouped
test <- data  %>% mutate(day = fct_reorder(day, tip))
View(test)
?fct_reorder
# Grouped
test <- data  %>% mutate(day = sort(day))
View(test)
# Grouped
test <- data  %>% mutate(day = sort(day, tip))
# Grouped
test <- data  %>%
mutate(day= sort(day)) %>%
mutate(tip = sort(tip))
test2 <- data %>% sort(day)
test2 <- data %>% sort(data$day)
test2 <- data %>% sort(data$tip)
test2 <- data %>% order(data$tip)
plot <- data %>%
mutate(day = fct_reorder(day, tip)) %>%
mutate(day = factor(day, levels=c("Thur", "Fri", "Sat", "Sun"))) %>%
ggplot(aes(fill=sex, y=tip, x=day)) +
geom_violin(position="dodge", alpha=0.5) +
scale_fill_viridis(discrete=T, name="") +
theme_ipsum()  +
xlab("") +
ylab("Tip (%)") #+
plot
test3 <- data %>%
mutate(day = fct_reorder(day, tip)) %>%
mutate(day = factor(day, levels=c("Thur", "Fri", "Sat", "Sun")))
View(test3)
plot <- data %>%
mutate(day = fct_reorder(day, tip)) %>%
mutate(day = factor(day, levels=c("Thur", "Fri", "Sat", "Sun"))) %>%
ggplot(aes(fill=sex, y=tip, x=day)) +
geom_violin(position="dodge", alpha=0.5) +
scale_fill_viridis(discrete=T, name="") +
theme_ipsum()  +
xlab("") +
ylab("Tip (%)") +
ylim(0,40)
plot
plot <- data %>%
ggplot(aes(fill=sex, y=tip, x=fct_reorder(day, tip))) +
geom_violin(position="dodge", alpha=0.5) +
scale_fill_viridis(discrete=T, name="") +
theme_ipsum()  +
xlab("") +
ylab("Tip (%)") +
ylim(0,40)
plot
ggplot(aes(fill=sex, y=tip, x=factor(day, levels=c("Thur", "Fri", "Sat", "Sun"))) +
plot <- data %>%
ggplot(aes(fill=sex, y=tip, x=factor(day, levels=c("Thur", "Fri", "Sat", "Sun")))) +
geom_violin(position="dodge", alpha=0.5) +
scale_fill_viridis(discrete=T, name="") +
theme_ipsum()  +
xlab("") +
ylab("Tip (%)") +
ylim(0,40)
plot
plot <- data %>%
ggplot(aes(fill=sex, y=tip, x=factor(day, levels=c("Thur", "Fri", "Sat", "Sun")))) +
geom_violin(position="dodge", alpha=0.5) +
scale_fill_viridis(discrete=T, name="") +
theme_ipsum()  +
xlab("") +
ylab("Tip (%)") +
ylim(0,40)
ploT
plot
plot2 <- data %>%
ggplot(aes(fill=sex, y=tip, x=day)) +
geom_violin(position="dodge", alpha=0.5) +
scale_fill_viridis(discrete=T, name="") +
theme_ipsum()  +
xlab("") +
ylab("Tip (%)") +
ylim(0,40)
plot2
plot
plot2
plot
lipidClassName <- 'IDL.L'
columnNumber <- which( colnames(metabolomicsDataGroups_transformed)==lipidClassName )
# Grouped
metabolomicsDataGroups_transformed %>%
mutate(Diet =  fct_reorder(Diet, IDL.L)) %>%
mutate(Diet = factor(Diet, levels=c("Control", "Experimental"))) %>%
ggplot(aes(fill=Diet, y=IDL.L, x=time)) +
geom_violin(position="dodge", alpha=0.5, trim = FALSE, scale = "count") +
geom_quasirandom() + ##Alternativ geom_beeswarm() +
scale_fill_viridis(discrete=T, name="Timepoints") +
theme_ipsum()  +
xlab(lipidClassName) +
ylab("Measurement (transformed)") +
ylim(0,maxVerticalAxis)
View(metabolomicsDataGroups_transformed)
# Grouped
metabolomicsDataGroups_transformed %>%
mutate(Diet =  fct_reorder(Diet, IDL.L)) %>%
mutate(Diet = factor(Diet, levels=c("Control", "Experimental"))) %>%
ggplot(aes(fill=Diet, y=IDL.L, x=time)) +
geom_violin(position="dodge", alpha=0.5, trim = FALSE, scale = "count") +
geom_quasirandom() + ##Alternativ geom_beeswarm() +
scale_fill_viridis(discrete=T, name="Timepoint") +
theme_ipsum()  +
xlab(lipidClassName) +
ylab("Measurement (transformed)") +
ylim(0,maxVerticalAxis)
# Grouped
metabolomicsDataGroups_transformed %>%
mutate(Diet =  fct_reorder(Diet, IDL.L)) %>%
mutate(Diet = factor(Diet, levels=c("Control", "Experimental"))) %>%
ggplot(aes(fill=Diet, y=IDL.L, x=time)) +
geom_violin(position="dodge", alpha=0.5, trim = FALSE, scale = "count") +
geom_quasirandom() + ##Alternativ geom_beeswarm() +
scale_fill_viridis(discrete=T, name="Timepoint") +
theme_ipsum()  +
xlab(lipidClassName) +
ylab("Measurement (transformed)") +
ylim(0,maxVerticalAxis)
?ggplot
# Grouped
metabolomicsDataGroups_transformed %>%
mutate(Diet =  fct_reorder(Diet, IDL.L)) %>%
mutate(Diet = factor(Diet, levels=c("Control", "Experimental"))) %>%
ggplot(aes(fill=Diet, colour=Diet, y=IDL.L, x=time)) +
geom_violin(position="dodge", alpha=0.5, trim = FALSE, scale = "count") +
geom_quasirandom() + ##Alternativ geom_beeswarm() +
scale_fill_viridis(discrete=T, name="Timepoint") +
theme_ipsum()  +
xlab(lipidClassName) +
ylab("Measurement (transformed)") +
ylim(0,maxVerticalAxis)
# Grouped
metabolomicsDataGroups_transformed %>%
mutate(Diet =  fct_reorder(Diet, IDL.L)) %>%
mutate(Diet = factor(Diet, levels=c("Control", "Experimental"))) %>%
ggplot(aes(fill=Diet, colour=Diet, y=IDL.L, x=time)) +
geom_violin(position="dodge", alpha=0.5, trim = FALSE, scale = "count") +
geom_quasirandom() + ##Alternativ geom_beeswarm() +
theme_ipsum()  +
xlab(lipidClassName) +
ylab("Measurement (transformed)") +
ylim(0,maxVerticalAxis)
metabolomicsDataGroups_transformed %>%
ggplot(aes(fill=Diet, colour=Diet, y=IDL.L, x=time)) +
geom_violin(position="dodge", alpha=0.5, trim = FALSE, scale = "count") +
geom_quasirandom() + ##Alternativ geom_beeswarm() +
scale_fill_viridis(discrete=T, name="Timepoint") +
theme_ipsum()  +
xlab(lipidClassName) +
ylab("Measurement (transformed)") +
ylim(0,maxVerticalAxis)
metabolomicsDataGroups_transformed %>%
mutate(Diet = factor(Diet, levels=c("Control", "Experimental"))) %>%
ggplot(aes(fill=Diet, colour=Diet, y=IDL.L, x=time)) +
geom_violin(position="dodge", alpha=0.5, trim = FALSE, scale = "count") +
geom_quasirandom() + ##Alternativ geom_beeswarm() +
scale_fill_viridis(discrete=T, name="Timepoint") +
theme_ipsum()  +
xlab(lipidClassName) +
ylab("Measurement (transformed)") +
ylim(0,maxVerticalAxis)
# Grouped
metabolomicsDataGroups_transformed %>%
mutate(Diet =  fct_reorder(Diet, IDL.L)) %>%
mutate(Diet = factor(Diet, levels=c("C_diet", "Ex_diet"))) %>%
ggplot(aes(fill=Diet, colour=Diet, y=IDL.L, x=time)) +
geom_violin(position="dodge", alpha=0.5, trim = FALSE, scale = "count") +
geom_quasirandom() + ##Alternativ geom_beeswarm() +
scale_fill_viridis(discrete=T, name="Timepoint") +
theme_ipsum()  +
xlab(lipidClassName) +
ylab("Measurement (transformed)") +
ylim(0,maxVerticalAxis)
metabolomicsDataGroups_transformed %>%
mutate(Diet = factor(Diet, levels=c("Control", "Experimental"))) %>%
ggplot(aes(fill=Diet, y=IDL.L, x=time)) +
geom_violin(position="dodge", alpha=0.5, trim = FALSE, scale = "count") +
geom_quasirandom() + ##Alternativ geom_beeswarm() +
scale_fill_viridis(discrete=T, name="Timepoint") +
theme_ipsum()  +
xlab(lipidClassName) +
ylab("Measurement (transformed)") +
ylim(0,maxVerticalAxis)
metabolomicsDataGroups_transformed %>%
mutate(Diet = factor(Diet, levels=c("Control", "Experimental"))) %>%
ggplot(aes(fill=Diet, colour=Diet, y=IDL.L, x=time)) +
geom_violin(position="dodge", alpha=0.5, trim = FALSE, scale = "count") +
geom_quasirandom() + ##Alternativ geom_beeswarm() +
scale_fill_viridis(discrete=T, name="Timepoint") +
theme_ipsum()  +
xlab(lipidClassName) +
ylab("Measurement (transformed)") +
ylim(0,maxVerticalAxis)
# Grouped
metabolomicsDataGroups_transformed %>%
mutate(Diet =  fct_reorder(Diet, IDL.L)) %>%
mutate(Diet = factor(Diet, levels=c("C_diet", "Ex_diet"))) %>%
ggplot(aes(fill=Diet, y=IDL.L, x=time)) +
geom_violin(position="dodge", alpha=0.5, trim = FALSE, scale = "count") +
geom_quasirandom() + ##Alternativ geom_beeswarm() +
scale_fill_viridis(discrete=T, name="Timepoint") +
theme_ipsum()  +
xlab(lipidClassName) +
ylab("Measurement (transformed)") +
ylim(0,maxVerticalAxis)
# Grouped
metabolomicsDataGroups_transformed %>%
mutate(Diet =  fct_reorder(Diet, IDL.L)) %>%
mutate(Diet = factor(Diet, levels=c("C_diet", "Ex_diet"))) %>%
ggplot(aes(colour=Diet, y=IDL.L, x=time)) +
geom_violin(position="dodge", alpha=0.5, trim = FALSE, scale = "count") +
geom_quasirandom() + ##Alternativ geom_beeswarm() +
scale_fill_viridis(discrete=T, name="Timepoint") +
theme_ipsum()  +
xlab(lipidClassName) +
ylab("Measurement (transformed)") +
ylim(0,maxVerticalAxis)
# Grouped
metabolomicsDataGroups_transformed %>%
mutate(Diet =  fct_reorder(Diet, IDL.L)) %>%
mutate(Diet = factor(Diet, levels=c("C_diet", "Ex_diet"))) %>%
ggplot(aes(fill=Diet, colour=Diet, y=IDL.L, x=time)) +
geom_violin(position="dodge", alpha=0.5, trim = FALSE, scale = "count") +
geom_quasirandom() + ##Alternativ geom_beeswarm() +
scale_fill_viridis(discrete=T, name="Timepoint") +
theme_ipsum()  +
xlab(lipidClassName) +
ylab("Measurement (transformed)") +
ylim(0,maxVerticalAxis)
# Grouped
metabolomicsDataGroups_transformed %>%
mutate(Diet = factor(Diet, levels=c("C_diet", "Ex_diet"))) %>%
ggplot(aes(fill=Diet, colour=Diet, y=IDL.L, x=time)) +
geom_violin(position="dodge", alpha=0.5, trim = FALSE, scale = "count") +
geom_quasirandom() + ##Alternativ geom_beeswarm() +
scale_fill_viridis(discrete=T, name="Timepoint") +
theme_ipsum()  +
xlab(lipidClassName) +
ylab("Measurement (transformed)") +
ylim(0,maxVerticalAxis)
# Grouped
metabolomicsDataGroups_transformed %>%
ggplot(aes(fill=Diet, colour=Diet, y=IDL.L, x=time)) +
geom_violin(position="dodge", alpha=0.5, trim = FALSE, scale = "count") +
geom_quasirandom() + ##Alternativ geom_beeswarm() +
scale_fill_viridis(discrete=T, name="Timepoint") +
theme_ipsum()  +
xlab(lipidClassName) +
ylab("Measurement (transformed)") +
ylim(0,maxVerticalAxis)
# Grouped
metabolomicsDataGroups_transformed %>%
mutate(Diet = factor(Diet, levels=c("C_diet", "Ex_diet"))) %>%
ggplot(aes(fill=Diet, colour=Diet, y=IDL.L, x=time)) +
geom_violin(position="dodge", alpha=0.5, trim = FALSE, scale = "count") +
geom_quasirandom() + ##Alternativ geom_beeswarm() +
scale_fill_viridis(discrete=T, name="Timepoint") +
theme_ipsum()  +
xlab(lipidClassName) +
ylab("Measurement (transformed)") +
ylim(0,maxVerticalAxis)
metabolomicsDataGroups_transformed %>%
ggplot(aes(fill=Diet, colour=Diet, y=IDL.L, x=time)) +
geom_violin()
metabolomicsDataGroups_transformed %>%
ggplot(aes(fill=Diet, colour=Diet, y=IDL.L, x=time)) +
geom_violin() +
geom_beeswarm()
metabolomicsDataGroups_transformed %>%
ggplot(aes(fill=Diet, colour=Diet, y=IDL.L, x=time)) +
geom_violin() +
geom_quasirandom()
metabolomicsDataGroups_transformed %>%
ggplot(aes(fill=Diet, colour=Diet, y=IDL.L, x=time)) +
geom_violin() +
geom_quasirandom() +
xlab(lipidClassName) +
ylab("Measurement (transformed)") +
ylim(0,maxVerticalAxis)
metabolomicsDataGroups_transformed %>%
ggplot(aes(fill=Diet, colour=Diet, y=IDL.L, x=time)) +
geom_violin() +
geom_quasirandom() +
xlab(lipidClassName) +
ylab(paste("Measurement", (transformed))) +
ylim(0,maxVerticalAxis)
metabolomicsDataGroups_transformed %>%
ggplot(aes(fill=Diet, colour=Diet, y=IDL.L, x=time)) +
geom_violin() +
geom_quasirandom() +
xlab(lipidClassName) +
ylab(paste("Measurement", transformation)) +
ylim(0,maxVerticalAxis)
metabolomicsDataGroups_transformed %>%
ggplot(aes(fill=Diet, colour=Diet, y=IDL.L, x=time)) +
geom_violin() +
geom_quasirandom() +
xlab(lipidClassName) +
ylab(paste("Measurement (transformed)")) +
ylim(0,maxVerticalAxis)
metabolomicsDataGroups_transformed %>%
ggplot(aes(fill=Diet, colour=Diet, y=IDL.L, x=time)) +
geom_violin() +
geom_quasirandom() +
scale_fill_viridis(discrete=T, name="Timepoint") +
xlab(lipidClassName) +
ylab(paste("Measurement (transformed)")) +
ylim(0,maxVerticalAxis)
metabolomicsDataGroups_transformed %>%
ggplot(aes(fill=Diet, colour=Diet, y=IDL.L, x=time)) +
geom_violin() +
geom_quasirandom() +
scale_fill_viridis(discrete=T, name="Diet") +
xlab(lipidClassName) +
ylab(paste("Measurement (transformed)")) +
ylim(0,maxVerticalAxis)
scale_fill_viridis(discrete=T, Diet
metabolomicsDataGroups_transformed %>%
?scale_fill_viridis
metabolomicsDataGroups_transformed %>%
ggplot(aes(fill=Diet, colour=Diet, y=IDL.L, x=time)) +
geom_violin() +
geom_quasirandom() +
xlab(lipidClassName) +
ylab(paste("Measurement (transformed)")) +
ylim(0,maxVerticalAxis)
metabolomicsDataGroups_transformed %>%
ggplot(aes(fill=Diet, colour=Diet, y=IDL.L, x=time)) +
geom_violin() +
geom_quasirandom() +
xlab(lipidClassName) +
ylab(paste("Measurement (transformed)")) #+
